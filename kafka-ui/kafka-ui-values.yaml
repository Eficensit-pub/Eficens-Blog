---
replicaCount: 1
image:
  registry: docker.io
  repository: provectuslabs/kafka-ui
  pullPolicy: IfNotPresent
  tag: ""
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  create: true
  annotations: {}
  name: ""
existingConfigMap: ""
yamlApplicationConfig:
  kafka:
    clusters:
      - name: kafka
        bootstrapServers: $endpoint:9094
        zookeeper: $endpoint:2181
        readonly: true
        properties.security.protocol: SSL
yamlApplicationConfigConfigMap: {}
existingSecret: ""
envs:
  secret: {}
  config:
    AUTH_TYPE: OAUTH2
    AUTH_OAUTH2_CLIENT_AUTH0_CLIENTID: AUTH_OAUTH2_CLIENT_AUTH0_CLIENTID
    AUTH_OAUTH2_CLIENT_AUTH0_CLIENTSECRET: AUTH_OAUTH2_CLIENT_AUTH0_CLIENTSECRET
    AUTH_OAUTH2_CLIENT_AUTH0_SCOPE: https://graph.microsoft.com/User.Read
    AUTH_OAUTH2_CLIENT_AUTH0_ISSUER-URI: https://login.microsoftonline.com/1146cf6d-9b72-4828-bd04-9f1ccb305586/v2.0
    AUTH_OAUTH2_CLIENT_AUTH0_PROVIDER: auth0
networkPolicy:
  enabled: false
  egressRules:
    customRules: []
  ingressRules:
    customRules: []
podAnnotations: {}
podLabels: {}
annotations: {}
probes:
  useHttpsScheme: false
podSecurityContext: {}
securityContext: {}
service:
  type: ClusterIP
  port: 80
ingress:
  enabled: true
  annotations:
    alb.ingress.kubernetes.io/actions.ssl-redirect: |-
      {"Type": "redirect", "RedirectConfig":
      { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}
    alb.ingress.kubernetes.io/group.name: group_name of load balancer
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: ip
    kubernetes.io/ingress.class: alb
  ingressClassName: ""
  path: /
  pathType: Prefix
  host: endpoint_url
  paths:
    - /*
  tls:
    enabled: false
    secretName: ""
  precedingPaths: []
  succeedingPaths: []
resources: {}
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}
env: {}
initContainers: {}
volumeMounts: {}
volumes: {}